type: remote_edu
files:
  - name: test/__init__.py
    visible: false
    learner_created: false
  - name: test/tests.py
    visible: false
    text: |
      import re
      
      from hstest.stage_test import *
      from hstest.test_case import TestCase
      
      CheckResult.correct = lambda: CheckResult(True, '')
      CheckResult.wrong = lambda feedback: CheckResult(False, feedback)
      
      
      class ChattyBotTest(StageTest):
          def generate(self) -> List[TestCase]:
              mary_input = "Mary\n1\n0\n5\n10\n" + '\n'.join(str(i + 1) for i in range(10))
              jeff_input = "Jeff\n2\n4\n1\n7\n" + '\n'.join(str(i + 1) for i in range(10))
      
              return [
                  TestCase(stdin=mary_input, attach=("Mary", 40, 10)),
                  TestCase(stdin=jeff_input, attach=("Jeff", 29, 7))
              ]
      
          def check(self, reply: str, clue: Any) -> CheckResult:
              lines = reply.strip().splitlines()
      
              # Stage 1 tests
              if not re.match(r"^Hello! My name is .*\.$", lines[0]):
                  return CheckResult.wrong(
                      "The 1-st line of your output is NOT correct.\n" +
                      "Your program incorrectly output as the 1-st line: " + lines[0] + "\n\n" +
                      "The 1-st line should be: 'Hello! My name is {bot_name}.'"
                  )
      
              if not re.match(r"^I was created in \d{4}\.$", lines[1]):
                  return CheckResult.wrong(
                      "The 2nd line of your output does NOT match the expected format or does NOT contain a valid year.\n" +
                      "Your program incorrectly output as the 2-nd line: " + lines[1] + "\n\n" +
                      "The 2-nd line should be: 'I was created in {birth_year}.' "
                      "where {birth_year} is a four-digit number like 2023."
                  )
      
              # Stage 2 tests
              if lines[2] != "Please, remind me of your name.":
                  return CheckResult.wrong(
                      "The 3-rd line of your output is NOT correct.\n" +
                      "Your program incorrectly output as the 3-rd line: " + lines[2] + "\n\n" +
                      "The 3-rd line should be: 'Please, remind me of your name.'"
                  )
      
              line_with_name = lines[3].lower()
              name = clue[0].lower()
              name_pattern = rf"^what a great name you have, {name}!$"
              if name not in line_with_name or not re.match(name_pattern, line_with_name):
                  return CheckResult.wrong(
                      "The 4-th line of your output is NOT correct.\n" +
                      "Your program incorrectly output as the 4-th line: " + lines[3] + "\n\n" +
                      "The 4-th line should be: 'What a great name you have, {name}!' "
                      "where {name} is the name you input earlier."
                  )
      
              # Stage 3 tests
              if lines[4] != "Let me guess your age.":
                  return CheckResult.wrong(
                      "The 5-th line of your output is NOT correct.\n" +
                      "Your program incorrectly output as the 5-th line: " + lines[4] + "\n\n" +
                      "The 5-th line should be: 'Let me guess your age.'"
                  )
      
              if lines[5] != "Enter remainders of dividing your age by 3, 5 and 7.":
                  return CheckResult.wrong(
                      "The 6-th line of your output is NOT correct.\n" +
                      "Your program incorrectly output as the 6-th line: " + lines[5] + "\n\n" +
                      "The 6-th line should be: 'Enter remainders of dividing your age by 3, 5 and 7.'"
                  )
      
              line_with_age = lines[6].lower()
              age = str(clue[1])
              age_pattern = rf"^your age is {age}; that's a good time to start programming!$"
              if age not in line_with_age or not re.match(age_pattern, line_with_age):
                  return CheckResult.wrong(
                      "The 7-th line of your output does NOT match the expected format "
                      "or does NOT calculate the age correctly.\n" +
                      "Your program incorrectly output as the 7-th line: " + lines[6] + "\n\n" +
                      f"The 7th line should be: 'Your age is {clue[1]}; that's a good time to start programming!'"
                  )
      
              if lines[7] != "Now I will prove to you that I can count to any number you want.":
                  return CheckResult.wrong(
                      "The 8-th line of your output is NOT correct.\n" +
                      "Your program incorrectly output as the 8-th line: " + lines[7] + "\n\n" +
                      "The 8-th line should be: 'Now I will prove to you that I can count to any number you want.'"
                  )
      
              # Stage 4 tests
              number_pattern = r"^(\d+)( !|!)?$"  # Pattern that can match numbers in three formats: 0, 0!, or 0 !
      
              # Find the starting line of the number sequence output
              start_line = None
              for idx, line in enumerate(lines):
                  if re.match("^0( !|!)?$", line.strip()):
                      start_line = idx
                      break
      
              if start_line is None:
                  expected_sequence = '\n'.join([f"{i}!" for i in range(clue[2] + 1)])
                  return CheckResult.wrong(
                      "The start of the counting sequence does NOT match the expected "
                      "format or was NOT found in the output.\n" +
                      f"Ensure you print numbers from 0 to the input number: {clue[2]} inclusive.\n"
                      f"Each number should be printed on a new line followed by an exclamation mark '!'\n\n"
                      f"For example, if the input number is {clue[2]}, the expected output sequence should be:\n"
                      f"{expected_sequence}"
                  )
      
              # Check if the program did not reach the input number
              last_number_line_idx = start_line
              while re.match(number_pattern, lines[last_number_line_idx]):
                  last_number_line_idx += 1
              last_number_line_idx -= 1  # Adjust to point to the actual last counting line
              last_number_line = lines[last_number_line_idx]
      
              match = re.match(number_pattern, last_number_line)
              if match:
                  last_number = int(match.group(1))
                  if last_number < clue[2]:
                      return CheckResult.wrong(
                          f"Your program did NOT count up to the input number.\n" +
                          f"Expected to count from 0 to the input number: {clue[2]} "
                          f"but your program only counted up to: {last_number}"
                      )
      
              # Check counting lines
              for i in range(clue[2] + 1):
                  num_line = lines[start_line + i].strip()
                  expected_pattern = f"^{i}( !|!)?$"
                  if not re.match(expected_pattern, num_line):
                      return CheckResult.wrong(
                          f"The {start_line + i + 1}-th line of your output is NOT correct.\n" +
                          f"Your program incorrectly output as the {start_line + i + 1}-th line: " + num_line + "\n\n" +
                          f"The {start_line + i + 1}-th line should be one of: '{i}', '{i}!', or '{i} !'"
                      )
      
              # Check if the program counts past the input number
              if re.match(number_pattern, lines[start_line + clue[2] + 1]):
                  return CheckResult.wrong(
                      "Your program counted and printed more numbers than expected.\n" +
                      f"Expected to count from 0 to the input number: {clue[2]} "
                      f"but your program counted past that number until: {re.match(number_pattern, lines[-2]).group(0)}"
                  )
      
              # Check the last line
              if lines[-1] != "Congratulations, have a nice day!" and lines[-1] != "Completed, have a nice day!":
                  return CheckResult.wrong(
                      "The last line of your output is NOT correct.\n" +
                      f"Your program incorrectly output as the last line: '{lines[-1]}'\n\n"
                      f"Ensure your program is correctly counting from 0 to the input number: {clue[2]}\n"
                      f"and that the last line of your program is: 'Congratulations, have a nice day!'"
                  )
      
              return CheckResult.correct()
      
      
      if __name__ == '__main__':
          ChattyBotTest().run_tests()
    learner_created: false
  - name: main.go
    visible: true
    text: "package main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"Hello! My\
    \ name is Aid.\")\n\tfmt.Println(\"I was created in 2023.\")\n\tfmt.Println(\"\
    Please, remind me of your name.\")\n\n\tvar name string\n\tfmt.Scan(&name)\n\n\
    \tfmt.Println(\"What a great name you have, \" + name + \"!\")\n\tfmt.Println(\"\
    Let me guess your age.\")\n\tfmt.Println(\"Enter remainders of dividing your age\
    \ by 3, 5 and 7.\")\n\n\tvar rem3, rem5, rem7, age int\n\tfmt.Scan(&rem3, &rem5,\
    \ &rem7)\n\n\tage = (rem3*70 + rem5*21 + rem7*15) % 105\n\n\tfmt.Printf(\"Your\
    \ age is %d; that's a good time to start programming!\\n\", age)\n\tfmt.Println(\"\
    Now I will prove to you that I can count to any number you want.\")\n\n\t// read\
    \ a number and count to it here\n\n\tfmt.Println(\"Congratulations, have a nice\
    \ day!\")\n}\n"
    learner_created: false
  - name: tests.py
    visible: false
    text: |-
      from test.tests import ChattyBotTest
      
      if __name__ == '__main__':
          ChattyBotTest().run_tests()
    learner_created: false
feedback_link: https://hyperskill.org/learn/step/15501#comment
check_profile: hyperskill_go
status: Solved
feedback:
  message: <html>Correct solution</html>
  time: "Wed, 27 Mar 2024 20:45:16 UTC"
record: 4
